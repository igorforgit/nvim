-- config LSP

return {
    -- –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å nvim-cmp
    {
        "hrsh7th/nvim-cmp",
        dependencies = {
            "hrsh7th/cmp-nvim-lsp",  -- –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ LSP
            "hrsh7th/cmp-buffer",    -- –ò—Å—Ç–æ—á–Ω–∏–∫ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–∞
            "hrsh7th/cmp-path",      -- –ò—Å—Ç–æ—á–Ω–∏–∫ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø—É—Ç–µ–π
        },
        config = function()
            local cmp = require("cmp")

            cmp.setup({
                mapping = {
                    ["<Tab>"] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
                    ["<S-Tab>"] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
                    ["<C-Space>"] = cmp.mapping.complete(),  -- –í—ã–∑–æ–≤ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
                    ["<CR>"] = cmp.mapping.confirm({ select = true }),  -- –í—ã–±–æ—Ä —Å –ø–æ–º–æ—â—å—é Enter
                },
                sources = {
                    { name = "nvim_lsp" },  -- LSP –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                    { name = "buffer" },    -- –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–∞
                    { name = "path" },      -- –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø—É—Ç–µ–π
                },
                completion = {
                    completeopt = "menu,menuone,noinsert",  -- –û–ø—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                },
            })
        end,
    },

    -- LSP mason
    {
        "williamboman/mason.nvim",
        build = ":MasonUpdate",
        config = true,
    },

    {
        "williamboman/mason-lspconfig.nvim",
        dependencies = {
            "williamboman/mason.nvim",
            "neovim/nvim-lspconfig",
        },

        config = function()
            local lspconfig = require("lspconfig")
            local capabilities = require("cmp_nvim_lsp").default_capabilities()
            local mason_registry = require("mason-registry")

            -- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            local function log_message(msg)
                local log_path = vim.fn.stdpath("config") .. "/nvim.log"
                local log_file = io.open(log_path, "a")
                if log_file then
                    log_file:write("[", os.date("%Y-%m-%d %H:%M:%S"), "] ", msg, "\n")
                    log_file:close()
                end
            end

            log_message("üîß LSP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞.")

            -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ gopls
            lspconfig.gopls.setup {
                capabilities = capabilities,
                flags = {
                    debounce_text_changes = 150, -- –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
                },
                settings = {
                    gopls = {
                        analyses = {
                            unusedparams = true,
                            shadow = true,
                        },
                        staticcheck = true,
                    },
                },
                on_attach = function(client, bufnr)
                    if client.server_capabilities.documentFormattingProvider then
                        -- –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                        vim.api.nvim_create_autocmd("BufWritePre", {
                            buffer = bufnr,
                            callback = function()
                                vim.lsp.buf.format({ bufnr = bufnr })
                            end,
                        })
                    end
                end,
            }

            -- PHP
            lspconfig.intelephense.setup {
                cmd = { "intelephense", "--stdio" },
                capabilities = capabilities,
                -- settings = {
                --     intelephense = {
                --         files = {
                --             exclude = {
                --                 "**/vendor/**",         -- –ù–µ –∫–µ—à—É—Ä–µ–º –ø–∞–ø–∫—É vendor
                --             },
                --         },
                --     },
                -- },
            }

            -- -- Vue 3 + TS with takeOverMode
            -- -- –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç
            local vue_pkg = mason_registry.get_package("vue-language-server")
            log_message("vue package: " .. tostring(vue_pkg))

            -- –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ vue-language-server
            local vue_language_server_path = "/Users/igorgorovenko/.local/share/nvim/mason/packages/vue-language-server/node_modules/@vue/language-server"
            log_message("vue_language_server_path: " .. tostring(vue_language_server_path))

            lspconfig.ts_ls.setup {
                debounce_text_changes = 700,     -- –£–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É
                maxDiagnosticDelay = 3000,       -- –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
                capabilities = capabilities,
                init_options = {
                    plugins = {
                        {
                            name = "@vue/typescript-plugin",
                            location = vue_language_server_path,
                            languages = { "vue" },
                        },
                    },
                },
                filetypes = { "typescript", "javascript", "vue" },
            }
        end
    }
}
